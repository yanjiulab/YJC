# Thanks to Job Vranish (https://spin.atomicobject.com/2016/08/26/makefile-c-projects/)
TARGET_EXEC := app

BUILD_DIR := ./build
SRC_DIRS := ./src
INC_DIRS := ./include

# Find all the C and C++ files we want to compile
# Note the single quotes around the * expressions. The shell will incorrectly expand these otherwise, but we want to send the * directly to the find command.

# SOURCES = $(filter-out $(APP_FILE), $(shell find $(SOURCE_DIRECTORY) -name '*.c'))
APP_DIRECTORY=./src/app
APP_FILE=$(shell find $(APP_DIRECTORY) -name '*.c')
SRCS := $(filter-out $(APP_FILE), $(shell find $(SRC_DIRS) -name '*.cpp' -or -name '*.c' -or -name '*.s'))
# Prepends BUILD_DIR and appends .o to every src file
# As an example, ./your_dir/hello.cpp turns into ./build/./your_dir/hello.cpp.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/hello.cpp.o turns into ./build/hello.cpp.d
DEPS := $(OBJS:.o=.d)

# Every folder in ./src will need to be passed to GCC so that it can find header files
INC_DIRS := $(shell find $(SRC_DIRS) $(INC_DIRS) -type d)
# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
CPPFLAGS := $(INC_FLAGS) -MMD -MP

# Compiler Flags
CFLAGS = -g3 -DPRINT_DEBUG -DPRINT_ERROR #-std=c99 #-Wall -g3

# Used libraries
LDFLAGS = -lm -lreadline -lpthread -lncurses -lpanel -lmenu -lform -lsqlite3 -ldl #-L lib

MAIN_FILE=$(APP_DIRECTORY)/$(TARGET_EXEC).c

# The final build step.
$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CC) $(CPPFLAGS) $(MAIN_FILE) $(OBJS) -o $@ $(LDFLAGS)

# $(CC) $(CFLAGS) $(MAIN_FILE) $(SOURCES) $(INCLUDES) $(LIBS) -o $(OUTPUT)

# Build step for C source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Build step for C++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean
clean:
	rm -r $(BUILD_DIR)

# Include the .d makefiles. The - at the front suppresses the errors of missing
# Makefiles. Initially, all the .d files will be missing, and we don't want those
# errors to show up.
-include $(DEPS)